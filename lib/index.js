// Generated by CoffeeScript 1.7.1
(function() {
  var StaticHandlebarsCompiler, debug, fs, glob, handlebars, mkdirp, progeny, sysPath;

  handlebars = require("handlebars");

  sysPath = require("path");

  fs = require("fs");

  glob = require("glob");

  mkdirp = require("mkdirp");

  debug = require("debug")("brunch:staticHandlebars");

  progeny = require("progeny");

  module.exports = StaticHandlebarsCompiler = (function() {
    StaticHandlebarsCompiler.prototype.brunchPlugin = true;

    StaticHandlebarsCompiler.prototype.type = "template";

    StaticHandlebarsCompiler.prototype.extension = "tmpl";

    StaticHandlebarsCompiler.prototype.defaults = {
      outputDirectory: 'public',
      templatesDirectory: 'app/templates',
      partials: {
        directory: 'app/templates',
        prefix: '_'
      },
      data: {}
    };

    function StaticHandlebarsCompiler(config) {
      var _ref;
      this.config = config;
      this.config = this.config || {};
      this.config.plugins = this.config.plugins || {};
      this.config.plugins.staticHandlebars = this.config.plugins.staticHandlebars || {};
      this.config.plugins.staticHandlebars.partials = this.config.plugins.staticHandlebars.partials || {};
      this.rootPath = ((_ref = this.config.paths) != null ? _ref.root : void 0) || process.cwd();
      this.outputDirectory = this.config.plugins.staticHandlebars.outputDirectory || 'public';
      this.templatesDirectory = this.config.plugins.staticHandlebars.templatesDirectory || 'app/templates';
      this.staticData = this.config.plugins.staticHandlebars.data || {};
      this.partialsDirectory = this.config.plugins.staticHandlebars.partials.directory || this.templatesDirectory;
      this.partialsPrefix = '_';
      if ('string' === typeof this.config.plugins.staticHandlebars.partials.prefix) {
        this.partialsPrefix = this.config.plugins.staticHandlebars.partials.prefix;
      }
      this.getDependencies = progeny({
        rootPath: this.rootPath,
        extension: 'tmpl',
        extensionsList: ['tmpl'],
        regexp: /^\s*\{\{> ([\w]*)\}\}/,
        exclusion: /a^/,
        prefix: this.partialsPrefix
      });
    }

    StaticHandlebarsCompiler.prototype.withPartials = function(callback) {
      var errThrown, partials;
      partials = {};
      errThrown = false;
      return glob(sysPath.join(this.partialsDirectory, this.partialsPrefix + '*.tmpl'), (function(_this) {
        return function(err, files) {
          if (err != null) {
            return callback(err);
          } else if (!files.length) {
            return callback(null, partials);
          } else {
            return files.forEach(function(file) {
              var name;
              name = sysPath.basename(file, ".tmpl");
              if (this.partialsPrefix != null) {
                name = name.substr(this.partialsPrefix.length);
              }
              return fs.readFile(file, function(err, data) {
                if ((err != null) && !errThrown) {
                  errThrown = true;
                  return callback(err);
                } else {
                  partials[name] = data.toString();
                  if (Object.keys(partials).length === files.length) {
                    return callback(null, partials);
                  }
                }
              });
            });
          }
        };
      })(this));
    };

    StaticHandlebarsCompiler.prototype.compile = function(data, path, callback) {
      var basename, err, template;
      try {
        basename = sysPath.basename(path, ".tmpl");
        template = handlebars.compile(data);
        return this.withPartials((function(_this) {
          return function(err, partials) {
            var html, newPath, relPath;
            if (err != null) {
              return callback(err);
            } else {
              html = template(_this.staticData, {
                partials: partials,
                helpers: _this.makeHelpers(partials)
              });
              relPath = sysPath.relative(_this.templatesDirectory, path);
              newPath = sysPath.join(_this.outputDirectory, relPath.slice(0, -5) + ".html");
              mkdirp.sync(sysPath.dirname(newPath));
              debug('writing file', newPath);
              return fs.writeFile(newPath, html, function(err) {
                return callback(err, null);
              });
            }
          };
        })(this));
      } catch (_error) {
        err = _error;
        return callback(err, null);
      }
    };

    StaticHandlebarsCompiler.prototype.makeHelpers = function(partials) {
      return {
        partial: function(partial, options) {
          return new handlebars.SafeString(handlebars.compile(partials[partial])(options.hash));
        }
      };
    };

    return StaticHandlebarsCompiler;

  })();

}).call(this);